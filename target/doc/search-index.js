var N=null,E="",T="t",U="u",searchIndex={};
var R=["leemaze","result","to_owned","clone_into","try_from","borrow","type_id","typeid","borrow_mut","try_into","formatter","AllowedMoves2D","AllowedMoves3D","AllowedMoves4D","AllowedMoves5D","Mazewalker"];

searchIndex[R[0]]={"doc":E,"i":[[3,R[11],R[0],"2d connection rules- provide a vector of (i32,i32) tuples…",N,N],[3,R[12],E,"3d Connection rules - provide a vector of (i32,i32,i32)…",N,N],[3,R[13],E,"Ah! The classic changing minotaur's maze, also known a…",N,N],[3,R[14],E,"The 5D maze - If you've ever planned a new morning commute…",N,N],[3,R[15],E,E,N,N],[5,"boolify_2d_maze",E,"Boolify turns a generic 2d Vec<Vec> into a 2d Vec<Vec>,…",N,[[[T],["vec"]],["vec",["vec"]]]],[5,"boolify_3d_maze",E,"Boolify turns a generic 3d Vec<Vec<Vec>> data into a…",N,[[[T],["vec"]],["vec",["vec"]]]],[5,"boolify_4d_maze",E,"Boolify turns a generic 4d Vec<Vec<Vec<Vec>>> data into a…",N,[[[T],["vec"]],["vec",["vec"]]]],[5,"boolify_5d_maze",E,"Boolify turns a generic 5d Vec<Vec<Vec<Vec<Vec>>>> into a…",N,[[[T],["vec"]],["vec",["vec"]]]],[5,"mazestate2d",E,"mazestate2d: Given a boolean maze and i32 coordinates,…",N,N],[5,"mazestate3d",E,"mazestate3d: Given a boolean maze and i32 coordinates,…",N,N],[5,"mazestate4d",E,"mazestate4d: Given a boolean maze and i32 coordinates,…",N,N],[5,"mazestate5d",E,"mazestate5d: Given a boolean maze and i32 coordinates,…",N,N],[5,"maze2dpath",E,"Maze2dpath - feed it a maze Vec<Vec>, x y axis movement…",N,N],[5,"maze3dpath",E,"Maze3dpath - feed it a maze Vec<Vec<Vec>>, x y z axis…",N,N],[5,"maze4dpath",E,"Maze4dpath - feed it a maze Vec<Vec<Vec<Vec>>>, w x y z…",N,N],[5,"maze5dpath",E,"Maze5dpath - feed it a maze Vec<Vec<Vec<Vec<Vec>>>>, v w x…",N,N],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[2],E,E,0,[[["self"]],[T]]],[11,R[3],E,E,0,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[4],E,E,0,[[[U]],[R[1]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[1]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[2],E,E,1,[[["self"]],[T]]],[11,R[3],E,E,1,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[4],E,E,1,[[[U]],[R[1]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[R[7]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[1]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[2],E,E,2,[[["self"]],[T]]],[11,R[3],E,E,2,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[4],E,E,2,[[[U]],[R[1]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[1]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[2],E,E,3,[[["self"]],[T]]],[11,R[3],E,E,3,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[4],E,E,3,[[[U]],[R[1]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[R[7]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[1]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[2],E,E,4,[[["self"]],[T]]],[11,R[3],E,E,4,N],[11,"from",E,E,4,[[[T]],[T]]],[11,R[4],E,E,4,[[[U]],[R[1]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[R[7]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[1]]]],[11,"clone",E,E,0,[[["self"]],["allowedmoves2d"]]],[11,"clone",E,E,1,[[["self"]],["allowedmoves3d"]]],[11,"clone",E,E,2,[[["self"]],["allowedmoves4d"]]],[11,"clone",E,E,3,[[["self"]],["allowedmoves5d"]]],[11,"clone",E,E,4,[[["self"]],["mazewalker"]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[1]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[1]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[1]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[1]]]]],"p":[[3,R[11]],[3,R[12]],[3,R[13]],[3,R[14]],[3,R[15]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);